<?php

/**
 * @file
 * Implements().
 */
use Drupal\file\Entity\File;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\Node;
use Drupal\Component\Render\MarkupInterface;

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function market_wave_preprocess_region(&$variables) {
  $nowrap = [
    'primary_menu',
    'secondary_menu',
    'header',
  ];
  if (theme_get_setting('market_wave_region_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['attributes']['class'][] = theme_get_setting('market_wave_region_class_' . $variables['elements']['#region']);
  }
  elseif (!in_array($variables['elements']['#region'], $nowrap)) {
    $variables['attributes']['class'][] = '';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function market_wave_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $nowrap = [
    'primary_menu',
    'secondary_menu',
    'header',
  ];
  if (theme_get_setting('market_wave_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $region_clean = theme_get_setting('market_wave_region_clean_' . $variables['elements']['#region']);
  }
  else {
    $region_clean = in_array($variables['elements']['#region'], $nowrap);
  }
  if ($region_clean) {
    $suggestions[] = 'region__nowrap';
  }
}


/**
 * Implements theme_preprocess_page().
 */
function market_wave_preprocess_page(&$variables) {
  $variables['slideshow_display'] = theme_get_setting('slideshow_display');
  if($variables['slideshow_display']){
    $variables['slider_content'] = market_wave_theme_get_slider_content();
  }

  if(isset($variables['node'])) {
    $variables['title'] = $variables['node']->title->value;
  }
  else{
    $variables['title'] =$variables['page']['#title'];
  }

}

/**
 * Slider
 * Implements custom function for get slider content.
 */
function market_wave_theme_get_slider_content() {
  $slide_num = theme_get_setting('slide_num');
  for ($i = 1; $i <= $slide_num; $i++) {
    // Create a temporary variable to hold the fileID.
    $file_id = theme_get_setting('slide_image_' . $i);
    if (!empty($file_id)) {
      $file = File::load($file_id[0]);
      if ($file) {
        $uri = $file->getFileUri();
        $image_path = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
      }
    }
    elseif ($i < 3) {
      $image_path = \Drupal::service('extension.list.theme')->getPath('market_wave') . '/images/slide' . $i . '_image.jpg';
    }
    else {
      // Handle the case when the file is not found.
      $image_path = "";
    }
    // Now use the temporary variable as the key in the array.
    if (empty(theme_get_setting('slide_title_' . $i)) && empty(theme_get_setting('slide_url_' . $i)) && empty(theme_get_setting('slide_url_title_' . $i)) && empty($image_path)) {
      $message = "All feild is empty";
    } else {
      if ((!empty(theme_get_setting('slide_title_' . $i)) || empty(theme_get_setting('slide_url_' . $i)) || empty(theme_get_setting('slide_url_title_' . $i))) && empty($image_path)) {
        $image_path = \Drupal::service('extension.list.theme')->getPath('market_wave') . '/images/slide' . 1 . '_image.jpg';
      }
      $slider_content[$i] = '<div class="swiper-slide swiper-slide-item--'. $i .'">
          <div class="slide-inner slide-bg-image" data-background="' . $image_path . '">
            <div class="container">
              <div data-swiper-parallax="300" class="slide-title">
                <h2>'.theme_get_setting('slide_title_' . $i).'</h2>
              </div>
              <div data-swiper-parallax="400" class="slide-text">
                <p>'.theme_get_setting('slide_desc_' . $i)['value'].'</p>
              </div>
              <div class="clearfix"></div>
              <div data-swiper-parallax="500" class="slide-btns">
              <a href="'.theme_get_setting('slide_url_' . $i).'" class="button--secondary">'.theme_get_setting('slide_url_title_' . $i).'</a>
              </div>
            </div>
          </div>
          <!-- end slide-inner -->
        </div>';
    }
  }
  return $slider_content;
}

/**
 * Preprocess variables for the menu local task template.
 * @param $variables
 */
function market_wave_preprocess_menu_local_task(&$variables) {
  $variables['link']['#title'] = $variables['element']['#link']['title'];
  $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  if (!empty($variables['element']['#active'])) {
      $variables['link']['#options']['attributes']['class'][] = 'active';
  }
}


/**
 * Form_alter()
 */
function market_wave_form_alter(&$form, $form_state, $form_id) {
  // User form (Login, Register or Forgot password)
  if (strpos($form_id, 'user_login') !== FALSE || strpos($form_id, 'user_register') !== FALSE || in_array($form_id, ['user_pass'])) {
    $form['actions']['submit']['#attributes']['class'][] = 'button--primary';

    // Check if site is in maintenance mode.
    // Display a message if true.
    if (\Drupal::state()->get('system.maintenance_mode')) {
      \Drupal::messenger()->addWarning(
        new FormattableMarkup(\Drupal::config('system.maintenance')->get('message'), [
          '@site' => \Drupal::config('system.site')->get('name'),
        ])
      );
    }
  }

  // Adding button/links to Register and Forgot password.
  if (strpos($form_id, 'user_login') !== FALSE) {
    // Move actions before new elements.
    $form['actions']['#weight'] = '98';

    // Add new class to submit button.
    $form['actions']['submit']['#attributes']['class'][] = 'button-login';

    // New wrapper.
    $form['more-links'] = [
      '#type' => 'container',
      '#weight' => '99',
      '#attributes' => ['class' => ['more-links']],
    ];


    // Forgot password link.
    $form['more-links']['forgot_password_link'] = [
      '#type' => 'link',
      '#url' => Url::fromRoute('user.pass'),
      '#title' => t('Forgot your password?'),
      '#attributes' => ['class' => ['link', 'forgot-password-link']],
      '#weight' => '2',
    ];

    // Register button.
    $register_url = Url::fromRoute('user.register');
    if ($register_url->access()) {
      $form['more-links']['register_button'] = [
        '#type' => 'link',
        '#url' => $register_url,
        '#title' => t('Create new account'),
        '#attributes' => [
          'class' => [
            'register-button',
          ],
        ],
        '#weight' => '1',
      ];
    }
  }

  // Changing name of Reset button.
  if (in_array($form_id, ['user_pass'])) {
    $form['actions']['submit']['#value'] = t('Reset');
  }
}

/**
 * Implements hook_preprocess_comment() for getting first later of comment auther name.
 */
function market_wave_preprocess_comment(&$variables) {
  $user = User::load($variables['author_id']);
  if ($user->get('user_picture')->isEmpty()) {
    $variables['comment_author'] = ucfirst(substr($user->get('name')->value, 0, 1));
  }
}
function comment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'comment_comment_form'){
    $form['subject']['widget'][0]['value']['#placeholder'] = "Subject";
    $form['comment_body']['widget'][0]['#placeholder'] = "Comment";
    $form['actions']['submit']['#value'] = "Post Comment";
  }
}


/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function market_wave_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }

  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}